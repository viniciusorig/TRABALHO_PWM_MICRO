

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 30 10:18:22 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Version 2.40
    21                           ; Generated 17/11/2021 GMT
    22                           ; 
    23                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4550 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55   000000                     _TRISBbits	set	3987
    56   000000                     _TMR2ON	set	32338
    57   000000                     _PORTBbits	set	3969
    58   000000                     _TRISB	set	3987
    59   000000                     _TRISCbits	set	3988
    60   000000                     _CCP2CON	set	4026
    61   000000                     _T2CON	set	4042
    62   000000                     _PR2	set	4043
    63   000000                     _TRISE	set	3990
    64   000000                     _TRISD	set	3989
    65   000000                     _TMR2	set	4044
    66   000000                     _PORTD	set	3971
    67   000000                     _CCPR2L	set	4027
    68   000000                     _PORTEbits	set	3972
    69                           
    70                           	psect	smallconst
    71   000800                     __psmallconst:
    72                           	callstack 0
    73   000800  00                 	db	0
    74   000801                     STR_3:
    75   000801  35                 	db	53	;'5'
    76   000802  30                 	db	48	;'0'
    77   000803  25                 	db	37
    78   000804  00                 	db	0
    79   000805                     STR_2:
    80   000805  32                 	db	50	;'2'
    81   000806  35                 	db	53	;'5'
    82   000807  25                 	db	37
    83   000808  00                 	db	0
    84   000809                     STR_4:
    85   000809  37                 	db	55	;'7'
    86   00080A  35                 	db	53	;'5'
    87   00080B  25                 	db	37
    88   00080C  00                 	db	0
    89   00080D  00                 	db	0	; dummy byte at the end
    90   000000                     
    91                           ; #config settings
    92                           
    93                           	psect	cinit
    94   000A2C                     __pcinit:
    95                           	callstack 0
    96   000A2C                     start_initialization:
    97                           	callstack 0
    98   000A2C                     __initialization:
    99                           	callstack 0
   100   000A2C                     end_of_initialization:
   101                           	callstack 0
   102   000A2C                     __end_of__initialization:
   103                           	callstack 0
   104   000A2C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   105   000A2E  6EF8               	movwf	tblptru,c
   106   000A30  0E08               	movlw	high __Lsmallconst
   107   000A32  6EF7               	movwf	tblptrh,c
   108   000A34  0100               	movlb	0
   109   000A36  EF07  F004         	goto	_main	;jump to C main() function
   110                           
   111                           	psect	cstackCOMRAM
   112   000001                     __pcstackCOMRAM:
   113                           	callstack 0
   114   000001                     lcd_wr@val:
   115                           	callstack 0
   116   000001                     atraso_ms@valor:
   117                           	callstack 0
   118                           
   119                           ; 2 bytes @ 0x0
   120   000001                     	ds	2
   121   000003                     atraso_ms@i:
   122                           	callstack 0
   123                           
   124                           ; 2 bytes @ 0x2
   125   000003                     	ds	2
   126   000005                     atraso_ms@j:
   127                           	callstack 0
   128                           
   129                           ; 1 bytes @ 0x4
   130   000005                     	ds	1
   131   000006                     lcd_cmd@val:
   132                           	callstack 0
   133   000006                     lcd_dat@val:
   134                           	callstack 0
   135                           
   136                           ; 1 bytes @ 0x5
   137   000006                     	ds	1
   138   000007                     lcd_str@str:
   139                           	callstack 0
   140                           
   141                           ; 2 bytes @ 0x6
   142   000007                     	ds	2
   143   000009                     ??_lcd_str:
   144                           
   145                           ; 1 bytes @ 0x8
   146   000009                     	ds	2
   147   00000B                     lcd_str@i:
   148                           	callstack 0
   149                           
   150                           ; 1 bytes @ 0xA
   151   00000B                     	ds	1
   152   00000C                     
   153                           ; 1 bytes @ 0xB
   154 ;;
   155 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   156 ;;
   157 ;; *************** function _main *****************
   158 ;; Defined at:
   159 ;;		line 7 in file "newmain.c"
   160 ;; Parameters:    Size  Location     Type
   161 ;;		None
   162 ;; Auto vars:     Size  Location     Type
   163 ;;		None
   164 ;; Return value:  Size  Location     Type
   165 ;;                  1    wreg      void 
   166 ;; Registers used:
   167 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   168 ;; Tracked objects:
   169 ;;		On entry : 0/0
   170 ;;		On exit  : 0/0
   171 ;;		Unchanged: 0/0
   172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   173 ;;      Params:         0       0       0       0       0       0       0       0       0
   174 ;;      Locals:         0       0       0       0       0       0       0       0       0
   175 ;;      Temps:          0       0       0       0       0       0       0       0       0
   176 ;;      Totals:         0       0       0       0       0       0       0       0       0
   177 ;;Total ram usage:        0 bytes
   178 ;; Hardware stack levels required when called: 3
   179 ;; This function calls:
   180 ;;		_lcd_cmd
   181 ;;		_lcd_init
   182 ;;		_lcd_str
   183 ;; This function is called by:
   184 ;;		Startup code after reset
   185 ;; This function uses a non-reentrant model
   186 ;;
   187                           
   188                           	psect	text0
   189   00080E                     __ptext0:
   190                           	callstack 0
   191   00080E                     _main:
   192                           	callstack 28
   193   00080E                     
   194                           ;newmain.c: 9:     TRISCbits.RC1 = 0;
   195   00080E  9294               	bcf	148,1,c	;volatile
   196   000810                     
   197                           ;newmain.c: 11:     TRISD = 0x00;
   198   000810  0E00               	movlw	0
   199   000812  6E95               	movwf	149,c	;volatile
   200                           
   201                           ;newmain.c: 12:     TRISB = 0x00;
   202   000814  0E00               	movlw	0
   203   000816  6E93               	movwf	147,c	;volatile
   204                           
   205                           ;newmain.c: 13:     TRISE = 0x00;
   206   000818  0E00               	movlw	0
   207   00081A  6E96               	movwf	150,c	;volatile
   208   00081C                     
   209                           ;newmain.c: 15:     TRISBbits.TRISB0 = 1;
   210   00081C  8093               	bsf	147,0,c	;volatile
   211   00081E                     
   212                           ;newmain.c: 16:     TRISBbits.TRISB1 = 1;
   213   00081E  8293               	bsf	147,1,c	;volatile
   214   000820                     
   215                           ;newmain.c: 17:     TRISBbits.TRISB2 = 1;
   216   000820  8493               	bsf	147,2,c	;volatile
   217   000822                     
   218                           ;newmain.c: 18:     TRISBbits.TRISB3 = 1;
   219   000822  8693               	bsf	147,3,c	;volatile
   220                           
   221                           ;newmain.c: 20:     PR2 = 199;
   222   000824  0EC7               	movlw	199
   223   000826  6ECB               	movwf	203,c	;volatile
   224                           
   225                           ;newmain.c: 27:     T2CON = 0;
   226   000828  0E00               	movlw	0
   227   00082A  6ECA               	movwf	202,c	;volatile
   228                           
   229                           ;newmain.c: 28:     TMR2 = 0;
   230   00082C  0E00               	movlw	0
   231   00082E  6ECC               	movwf	204,c	;volatile
   232   000830                     
   233                           ;newmain.c: 29:     TMR2ON = 1;
   234   000830  84CA               	bsf	4042,2,c	;volatile
   235   000832                     
   236                           ;newmain.c: 30:     lcd_init();
   237   000832  EC72  F004         	call	_lcd_init	;wreg free
   238   000836                     
   239                           ;newmain.c: 31:     lcd_cmd(0x01);
   240   000836  0E01               	movlw	1
   241   000838  EC01  F005         	call	_lcd_cmd
   242   00083C                     l944:
   243                           
   244                           ;newmain.c: 34:     {;newmain.c: 35:         if(PORTBbits.RB0 == 0)
   245   00083C  B081               	btfsc	129,0,c	;volatile
   246   00083E  EF23  F004         	goto	u111
   247   000842  EF25  F004         	goto	u110
   248   000846                     u111:
   249   000846  EF32  F004         	goto	l954
   250   00084A                     u110:
   251   00084A                     
   252                           ;newmain.c: 36:         {;newmain.c: 37:             lcd_cmd(0x80);
   253   00084A  0E80               	movlw	128
   254   00084C  EC01  F005         	call	_lcd_cmd
   255   000850                     
   256                           ;newmain.c: 38:             lcd_str("0%");
   257   000850  0E02               	movlw	low (STR_3+1)
   258   000852  6E07               	movwf	lcd_str@str^0,c
   259   000854  0E08               	movlw	high (STR_3+1)
   260   000856  6E08               	movwf	(lcd_str@str+1)^0,c
   261   000858  ECA0  F004         	call	_lcd_str	;wreg free
   262   00085C                     
   263                           ;newmain.c: 39:             CCP2CON = 0x0C;
   264   00085C  0E0C               	movlw	12
   265   00085E  6EBA               	movwf	186,c	;volatile
   266   000860                     
   267                           ;newmain.c: 40:             CCPR2L = 0;
   268   000860  0E00               	movlw	0
   269   000862  6EBB               	movwf	187,c	;volatile
   270   000864                     l954:
   271                           
   272                           ;newmain.c: 42:         if(PORTBbits.RB1 == 0)
   273   000864  B281               	btfsc	129,1,c	;volatile
   274   000866  EF37  F004         	goto	u121
   275   00086A  EF39  F004         	goto	u120
   276   00086E                     u121:
   277   00086E  EF46  F004         	goto	l964
   278   000872                     u120:
   279   000872                     
   280                           ;newmain.c: 43:         {;newmain.c: 44:             lcd_cmd(0x80);
   281   000872  0E80               	movlw	128
   282   000874  EC01  F005         	call	_lcd_cmd
   283   000878                     
   284                           ;newmain.c: 45:             lcd_str("25%");
   285   000878  0E05               	movlw	low STR_2
   286   00087A  6E07               	movwf	lcd_str@str^0,c
   287   00087C  0E08               	movlw	high STR_2
   288   00087E  6E08               	movwf	(lcd_str@str+1)^0,c
   289   000880  ECA0  F004         	call	_lcd_str	;wreg free
   290   000884                     
   291                           ;newmain.c: 46:             CCP2CON = 0x0C;
   292   000884  0E0C               	movlw	12
   293   000886  6EBA               	movwf	186,c	;volatile
   294   000888                     
   295                           ;newmain.c: 47:             CCPR2L = 50;
   296   000888  0E32               	movlw	50
   297   00088A  6EBB               	movwf	187,c	;volatile
   298   00088C                     l964:
   299                           
   300                           ;newmain.c: 50:         if(PORTBbits.RB2 == 0)
   301   00088C  B481               	btfsc	129,2,c	;volatile
   302   00088E  EF4B  F004         	goto	u131
   303   000892  EF4D  F004         	goto	u130
   304   000896                     u131:
   305   000896  EF5A  F004         	goto	l974
   306   00089A                     u130:
   307   00089A                     
   308                           ;newmain.c: 51:         {;newmain.c: 52:             lcd_cmd(0x80);
   309   00089A  0E80               	movlw	128
   310   00089C  EC01  F005         	call	_lcd_cmd
   311   0008A0                     
   312                           ;newmain.c: 53:             lcd_str("50%");
   313   0008A0  0E01               	movlw	low STR_3
   314   0008A2  6E07               	movwf	lcd_str@str^0,c
   315   0008A4  0E08               	movlw	high STR_3
   316   0008A6  6E08               	movwf	(lcd_str@str+1)^0,c
   317   0008A8  ECA0  F004         	call	_lcd_str	;wreg free
   318   0008AC                     
   319                           ;newmain.c: 54:             CCP2CON = 0x0C;
   320   0008AC  0E0C               	movlw	12
   321   0008AE  6EBA               	movwf	186,c	;volatile
   322   0008B0                     
   323                           ;newmain.c: 55:             CCPR2L = 75;
   324   0008B0  0E4B               	movlw	75
   325   0008B2  6EBB               	movwf	187,c	;volatile
   326   0008B4                     l974:
   327                           
   328                           ;newmain.c: 57:         if(PORTBbits.RB3 == 0)
   329   0008B4  B681               	btfsc	129,3,c	;volatile
   330   0008B6  EF5F  F004         	goto	u141
   331   0008BA  EF61  F004         	goto	u140
   332   0008BE                     u141:
   333   0008BE  EF1E  F004         	goto	l944
   334   0008C2                     u140:
   335   0008C2                     
   336                           ;newmain.c: 58:         {;newmain.c: 59:             lcd_cmd(0x80);
   337   0008C2  0E80               	movlw	128
   338   0008C4  EC01  F005         	call	_lcd_cmd
   339   0008C8                     
   340                           ;newmain.c: 60:             lcd_str("75%");
   341   0008C8  0E09               	movlw	low STR_4
   342   0008CA  6E07               	movwf	lcd_str@str^0,c
   343   0008CC  0E08               	movlw	high STR_4
   344   0008CE  6E08               	movwf	(lcd_str@str+1)^0,c
   345   0008D0  ECA0  F004         	call	_lcd_str	;wreg free
   346   0008D4                     
   347                           ;newmain.c: 61:             CCP2CON = 0x0C;
   348   0008D4  0E0C               	movlw	12
   349   0008D6  6EBA               	movwf	186,c	;volatile
   350   0008D8                     
   351                           ;newmain.c: 62:             CCPR2L = 150;
   352   0008D8  0E96               	movlw	150
   353   0008DA  6EBB               	movwf	187,c	;volatile
   354   0008DC  EF1E  F004         	goto	l944
   355   0008E0  EF00  F000         	goto	start
   356   0008E4                     __end_of_main:
   357                           	callstack 0
   358                           
   359 ;; *************** function _lcd_str *****************
   360 ;; Defined at:
   361 ;;		line 76 in file "lcd.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;  str             2    6[COMRAM] PTR const unsigned char 
   364 ;;		 -> STR_4(4), STR_3(4), STR_2(4), STR_1(3), 
   365 ;; Auto vars:     Size  Location     Type
   366 ;;  i               1   10[COMRAM] unsigned char 
   367 ;; Return value:  Size  Location     Type
   368 ;;                  1    wreg      void 
   369 ;; Registers used:
   370 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   371 ;; Tracked objects:
   372 ;;		On entry : 0/0
   373 ;;		On exit  : 0/0
   374 ;;		Unchanged: 0/0
   375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   376 ;;      Params:         2       0       0       0       0       0       0       0       0
   377 ;;      Locals:         1       0       0       0       0       0       0       0       0
   378 ;;      Temps:          2       0       0       0       0       0       0       0       0
   379 ;;      Totals:         5       0       0       0       0       0       0       0       0
   380 ;;Total ram usage:        5 bytes
   381 ;; Hardware stack levels used: 1
   382 ;; Hardware stack levels required when called: 2
   383 ;; This function calls:
   384 ;;		_lcd_dat
   385 ;; This function is called by:
   386 ;;		_main
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           	psect	text1
   391   000940                     __ptext1:
   392                           	callstack 0
   393   000940                     _lcd_str:
   394                           	callstack 28
   395   000940                     
   396                           ;lcd.c: 76: void lcd_str(const char* str);lcd.c: 77: {;lcd.c: 78:  unsigned char i=0;
   397   000940  0E00               	movlw	0
   398   000942  6E0B               	movwf	lcd_str@i^0,c
   399                           
   400                           ;lcd.c: 80:  while(str[i] != 0 )
   401   000944  EFB3  F004         	goto	l924
   402   000948                     l920:
   403                           
   404                           ;lcd.c: 81:  {;lcd.c: 82:    lcd_dat(str[i]);
   405   000948  500B               	movf	lcd_str@i^0,w,c
   406   00094A  2407               	addwf	lcd_str@str^0,w,c
   407   00094C  6E09               	movwf	??_lcd_str^0,c
   408   00094E  0E00               	movlw	0
   409   000950  2008               	addwfc	(lcd_str@str+1)^0,w,c
   410   000952  6E0A               	movwf	(??_lcd_str+1)^0,c
   411   000954  C009  FFF6         	movff	??_lcd_str,tblptrl
   412   000958  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
   413   00095C                     	if	0	;tblptru may be non-zero
   414   00095C                     	endif
   415   00095C                     	if	0	;tblptru may be non-zero
   416   00095C                     	endif
   417   00095C  0008               	tblrd		*
   418   00095E  50F5               	movf	tablat,w,c
   419   000960  ECEC  F004         	call	_lcd_dat
   420   000964                     
   421                           ;lcd.c: 83:    i++;
   422   000964  2A0B               	incf	lcd_str@i^0,f,c
   423   000966                     l924:
   424                           
   425                           ;lcd.c: 80:  while(str[i] != 0 )
   426   000966  500B               	movf	lcd_str@i^0,w,c
   427   000968  2407               	addwf	lcd_str@str^0,w,c
   428   00096A  6E09               	movwf	??_lcd_str^0,c
   429   00096C  0E00               	movlw	0
   430   00096E  2008               	addwfc	(lcd_str@str+1)^0,w,c
   431   000970  6E0A               	movwf	(??_lcd_str+1)^0,c
   432   000972  C009  FFF6         	movff	??_lcd_str,tblptrl
   433   000976  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
   434   00097A                     	if	0	;tblptru may be non-zero
   435   00097A                     	endif
   436   00097A                     	if	0	;tblptru may be non-zero
   437   00097A                     	endif
   438   00097A  0008               	tblrd		*
   439   00097C  50F5               	movf	tablat,w,c
   440   00097E  0900               	iorlw	0
   441   000980  A4D8               	btfss	status,2,c
   442   000982  EFC5  F004         	goto	u101
   443   000986  EFC7  F004         	goto	u100
   444   00098A                     u101:
   445   00098A  EFA4  F004         	goto	l920
   446   00098E                     u100:
   447   00098E  0012               	return		;funcret
   448   000990                     __end_of_lcd_str:
   449                           	callstack 0
   450                           
   451 ;; *************** function _lcd_dat *****************
   452 ;; Defined at:
   453 ;;		line 46 in file "lcd.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;  val             1    wreg     unsigned char 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  val             1    5[COMRAM] unsigned char 
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, status,2, status,0, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   467 ;;      Params:         0       0       0       0       0       0       0       0       0
   468 ;;      Locals:         1       0       0       0       0       0       0       0       0
   469 ;;      Temps:          0       0       0       0       0       0       0       0       0
   470 ;;      Totals:         1       0       0       0       0       0       0       0       0
   471 ;;Total ram usage:        1 bytes
   472 ;; Hardware stack levels used: 1
   473 ;; Hardware stack levels required when called: 1
   474 ;; This function calls:
   475 ;;		_atraso_ms
   476 ;;		_lcd_wr
   477 ;; This function is called by:
   478 ;;		_lcd_str
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           	psect	text2
   483   0009D8                     __ptext2:
   484                           	callstack 0
   485   0009D8                     _lcd_dat:
   486                           	callstack 28
   487                           
   488                           ;incstack = 0
   489                           ;lcd_dat@val stored from wreg
   490   0009D8  6E06               	movwf	lcd_dat@val^0,c
   491   0009DA                     
   492                           ;lcd.c: 46: void lcd_dat(unsigned char val);lcd.c: 47: {;lcd.c: 48:  PORTEbits.RE1=1;
   493   0009DA  8284               	bsf	132,1,c	;volatile
   494   0009DC                     
   495                           ;lcd.c: 49:         lcd_wr(val);
   496   0009DC  5006               	movf	lcd_dat@val^0,w,c
   497   0009DE  EC1D  F005         	call	_lcd_wr
   498   0009E2                     
   499                           ;lcd.c: 50:         PORTEbits.RE0=1;
   500   0009E2  8084               	bsf	132,0,c	;volatile
   501   0009E4                     
   502                           ;lcd.c: 51:         atraso_ms(3);
   503   0009E4  0E00               	movlw	0
   504   0009E6  6E02               	movwf	(atraso_ms@valor+1)^0,c
   505   0009E8  0E03               	movlw	3
   506   0009EA  6E01               	movwf	atraso_ms@valor^0,c
   507   0009EC  ECC8  F004         	call	_atraso_ms	;wreg free
   508   0009F0                     
   509                           ;lcd.c: 52:         PORTEbits.RE1=0;
   510   0009F0  9284               	bcf	132,1,c	;volatile
   511   0009F2                     
   512                           ;lcd.c: 53:         atraso_ms(3);
   513   0009F2  0E00               	movlw	0
   514   0009F4  6E02               	movwf	(atraso_ms@valor+1)^0,c
   515   0009F6  0E03               	movlw	3
   516   0009F8  6E01               	movwf	atraso_ms@valor^0,c
   517   0009FA  ECC8  F004         	call	_atraso_ms	;wreg free
   518   0009FE                     
   519                           ;lcd.c: 54:  PORTEbits.RE1=1;
   520   0009FE  8284               	bsf	132,1,c	;volatile
   521   000A00  0012               	return		;funcret
   522   000A02                     __end_of_lcd_dat:
   523                           	callstack 0
   524                           
   525 ;; *************** function _lcd_init *****************
   526 ;; Defined at:
   527 ;;		line 57 in file "lcd.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;		None
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, status,2, status,0, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   541 ;;      Params:         0       0       0       0       0       0       0       0       0
   542 ;;      Locals:         0       0       0       0       0       0       0       0       0
   543 ;;      Temps:          0       0       0       0       0       0       0       0       0
   544 ;;      Totals:         0       0       0       0       0       0       0       0       0
   545 ;;Total ram usage:        0 bytes
   546 ;; Hardware stack levels used: 1
   547 ;; Hardware stack levels required when called: 2
   548 ;; This function calls:
   549 ;;		_atraso_ms
   550 ;;		_lcd_cmd
   551 ;; This function is called by:
   552 ;;		_main
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text3
   557   0008E4                     __ptext3:
   558                           	callstack 0
   559   0008E4                     _lcd_init:
   560                           	callstack 28
   561   0008E4                     
   562                           ;lcd.c: 59:  PORTEbits.RE1=0;
   563   0008E4  9284               	bcf	132,1,c	;volatile
   564                           
   565                           ;lcd.c: 60:  PORTEbits.RE0=0;
   566   0008E6  9084               	bcf	132,0,c	;volatile
   567   0008E8                     
   568                           ;lcd.c: 61:  atraso_ms(20);
   569   0008E8  0E00               	movlw	0
   570   0008EA  6E02               	movwf	(atraso_ms@valor+1)^0,c
   571   0008EC  0E14               	movlw	20
   572   0008EE  6E01               	movwf	atraso_ms@valor^0,c
   573   0008F0  ECC8  F004         	call	_atraso_ms	;wreg free
   574   0008F4                     
   575                           ;lcd.c: 62:  PORTEbits.RE1=1;
   576   0008F4  8284               	bsf	132,1,c	;volatile
   577                           
   578                           ;lcd.c: 64:  lcd_cmd(0x38);
   579   0008F6  0E38               	movlw	56
   580   0008F8  EC01  F005         	call	_lcd_cmd
   581                           
   582                           ;lcd.c: 65:  atraso_ms(5);
   583   0008FC  0E00               	movlw	0
   584   0008FE  6E02               	movwf	(atraso_ms@valor+1)^0,c
   585   000900  0E05               	movlw	5
   586   000902  6E01               	movwf	atraso_ms@valor^0,c
   587   000904  ECC8  F004         	call	_atraso_ms	;wreg free
   588                           
   589                           ;lcd.c: 66:  lcd_cmd(0x38);
   590   000908  0E38               	movlw	56
   591   00090A  EC01  F005         	call	_lcd_cmd
   592                           
   593                           ;lcd.c: 67:         atraso_ms(1);
   594   00090E  0E00               	movlw	0
   595   000910  6E02               	movwf	(atraso_ms@valor+1)^0,c
   596   000912  0E01               	movlw	1
   597   000914  6E01               	movwf	atraso_ms@valor^0,c
   598   000916  ECC8  F004         	call	_atraso_ms	;wreg free
   599                           
   600                           ;lcd.c: 68:  lcd_cmd(0x38);
   601   00091A  0E38               	movlw	56
   602   00091C  EC01  F005         	call	_lcd_cmd
   603                           
   604                           ;lcd.c: 69:  lcd_cmd(0x08);
   605   000920  0E08               	movlw	8
   606   000922  EC01  F005         	call	_lcd_cmd
   607                           
   608                           ;lcd.c: 70:  lcd_cmd(0x0F);
   609   000926  0E0F               	movlw	15
   610   000928  EC01  F005         	call	_lcd_cmd
   611                           
   612                           ;lcd.c: 71:  lcd_cmd(0x01);
   613   00092C  0E01               	movlw	1
   614   00092E  EC01  F005         	call	_lcd_cmd
   615                           
   616                           ;lcd.c: 72:  lcd_cmd(0x38);
   617   000932  0E38               	movlw	56
   618   000934  EC01  F005         	call	_lcd_cmd
   619                           
   620                           ;lcd.c: 73:         lcd_cmd(0x80);
   621   000938  0E80               	movlw	128
   622   00093A  EC01  F005         	call	_lcd_cmd
   623   00093E  0012               	return		;funcret
   624   000940                     __end_of_lcd_init:
   625                           	callstack 0
   626                           
   627 ;; *************** function _lcd_cmd *****************
   628 ;; Defined at:
   629 ;;		line 35 in file "lcd.c"
   630 ;; Parameters:    Size  Location     Type
   631 ;;  val             1    wreg     unsigned char 
   632 ;; Auto vars:     Size  Location     Type
   633 ;;  val             1    5[COMRAM] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, status,2, status,0, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   643 ;;      Params:         0       0       0       0       0       0       0       0       0
   644 ;;      Locals:         1       0       0       0       0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0       0       0       0       0
   646 ;;      Totals:         1       0       0       0       0       0       0       0       0
   647 ;;Total ram usage:        1 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; Hardware stack levels required when called: 1
   650 ;; This function calls:
   651 ;;		_atraso_ms
   652 ;;		_lcd_wr
   653 ;; This function is called by:
   654 ;;		_main
   655 ;;		_lcd_init
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           	psect	text4
   660   000A02                     __ptext4:
   661                           	callstack 0
   662   000A02                     _lcd_cmd:
   663                           	callstack 28
   664                           
   665                           ;incstack = 0
   666                           ;lcd_cmd@val stored from wreg
   667   000A02  6E06               	movwf	lcd_cmd@val^0,c
   668   000A04                     
   669                           ;lcd.c: 35: void lcd_cmd(unsigned char val);lcd.c: 36: {;lcd.c: 37:  PORTEbits.RE1=1;
   670   000A04  8284               	bsf	132,1,c	;volatile
   671   000A06                     
   672                           ;lcd.c: 38:         lcd_wr(val);
   673   000A06  5006               	movf	lcd_cmd@val^0,w,c
   674   000A08  EC1D  F005         	call	_lcd_wr
   675   000A0C                     
   676                           ;lcd.c: 39:         PORTEbits.RE0=0;
   677   000A0C  9084               	bcf	132,0,c	;volatile
   678   000A0E                     
   679                           ;lcd.c: 40:         atraso_ms(3);
   680   000A0E  0E00               	movlw	0
   681   000A10  6E02               	movwf	(atraso_ms@valor+1)^0,c
   682   000A12  0E03               	movlw	3
   683   000A14  6E01               	movwf	atraso_ms@valor^0,c
   684   000A16  ECC8  F004         	call	_atraso_ms	;wreg free
   685   000A1A                     
   686                           ;lcd.c: 41:         PORTEbits.RE1=0;
   687   000A1A  9284               	bcf	132,1,c	;volatile
   688   000A1C                     
   689                           ;lcd.c: 42:         atraso_ms(3);
   690   000A1C  0E00               	movlw	0
   691   000A1E  6E02               	movwf	(atraso_ms@valor+1)^0,c
   692   000A20  0E03               	movlw	3
   693   000A22  6E01               	movwf	atraso_ms@valor^0,c
   694   000A24  ECC8  F004         	call	_atraso_ms	;wreg free
   695   000A28                     
   696                           ;lcd.c: 43:  PORTEbits.RE1=1;
   697   000A28  8284               	bsf	132,1,c	;volatile
   698   000A2A  0012               	return		;funcret
   699   000A2C                     __end_of_lcd_cmd:
   700                           	callstack 0
   701                           
   702 ;; *************** function _lcd_wr *****************
   703 ;; Defined at:
   704 ;;		line 30 in file "lcd.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  val             1    wreg     unsigned char 
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  val             1    0[COMRAM] unsigned char 
   709 ;; Return value:  Size  Location     Type
   710 ;;                  1    wreg      void 
   711 ;; Registers used:
   712 ;;		wreg
   713 ;; Tracked objects:
   714 ;;		On entry : 0/0
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   718 ;;      Params:         0       0       0       0       0       0       0       0       0
   719 ;;      Locals:         1       0       0       0       0       0       0       0       0
   720 ;;      Temps:          0       0       0       0       0       0       0       0       0
   721 ;;      Totals:         1       0       0       0       0       0       0       0       0
   722 ;;Total ram usage:        1 bytes
   723 ;; Hardware stack levels used: 1
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_lcd_cmd
   728 ;;		_lcd_dat
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           	psect	text5
   733   000A3A                     __ptext5:
   734                           	callstack 0
   735   000A3A                     _lcd_wr:
   736                           	callstack 28
   737                           
   738                           ;incstack = 0
   739                           ;lcd_wr@val stored from wreg
   740   000A3A  6E01               	movwf	lcd_wr@val^0,c
   741   000A3C                     
   742                           ;lcd.c: 30: void lcd_wr(unsigned char val);lcd.c: 31: {;lcd.c: 32:   PORTD=val;
   743   000A3C  C001  FF83         	movff	lcd_wr@val,3971	;volatile
   744   000A40  0012               	return		;funcret
   745   000A42                     __end_of_lcd_wr:
   746                           	callstack 0
   747                           
   748 ;; *************** function _atraso_ms *****************
   749 ;; Defined at:
   750 ;;		line 26 in file "atraso.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;  valor           2    0[COMRAM] unsigned int 
   753 ;; Auto vars:     Size  Location     Type
   754 ;;  i               2    2[COMRAM] unsigned int 
   755 ;;  j               1    4[COMRAM] unsigned char 
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, status,2, status,0
   760 ;; Tracked objects:
   761 ;;		On entry : 0/0
   762 ;;		On exit  : 0/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   765 ;;      Params:         2       0       0       0       0       0       0       0       0
   766 ;;      Locals:         3       0       0       0       0       0       0       0       0
   767 ;;      Temps:          0       0       0       0       0       0       0       0       0
   768 ;;      Totals:         5       0       0       0       0       0       0       0       0
   769 ;;Total ram usage:        5 bytes
   770 ;; Hardware stack levels used: 1
   771 ;; This function calls:
   772 ;;		Nothing
   773 ;; This function is called by:
   774 ;;		_lcd_cmd
   775 ;;		_lcd_dat
   776 ;;		_lcd_init
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780                           	psect	text6
   781   000990                     __ptext6:
   782                           	callstack 0
   783   000990                     _atraso_ms:
   784                           	callstack 28
   785   000990                     
   786                           ;atraso.c: 26: void atraso_ms(unsigned int valor);atraso.c: 27: {;atraso.c: 28: unsigned
      +                           int i;;atraso.c: 29: unsigned char j;;atraso.c: 31:  for (i =0; i< valor; i++)
   787   000990  0E00               	movlw	0
   788   000992  6E04               	movwf	(atraso_ms@i+1)^0,c
   789   000994  0E00               	movlw	0
   790   000996  6E03               	movwf	atraso_ms@i^0,c
   791   000998  EFE0  F004         	goto	l882
   792   00099C                     l870:
   793                           
   794                           ;atraso.c: 32:  {;atraso.c: 34:   for (j =0 ; j < 200; j++)
   795   00099C  0E00               	movlw	0
   796   00099E  6E05               	movwf	atraso_ms@j^0,c
   797   0009A0                     l5:
   798   0009A0  F000               	nop		;# 
   799   0009A2  F000               	nop		;# 
   800   0009A4  F000               	nop		;# 
   801   0009A6  F000               	nop		;# 
   802   0009A8  F000               	nop		;# 
   803   0009AA                     
   804                           ;atraso.c: 41:    }
   805   0009AA  2A05               	incf	atraso_ms@j^0,f,c
   806   0009AC  0EC7               	movlw	199
   807   0009AE  6405               	cpfsgt	atraso_ms@j^0,c
   808   0009B0  EFDC  F004         	goto	u81
   809   0009B4  EFDE  F004         	goto	u80
   810   0009B8                     u81:
   811   0009B8  EFD0  F004         	goto	l5
   812   0009BC                     u80:
   813   0009BC                     
   814                           ;atraso.c: 42:  }
   815   0009BC  4A03               	infsnz	atraso_ms@i^0,f,c
   816   0009BE  2A04               	incf	(atraso_ms@i+1)^0,f,c
   817   0009C0                     l882:
   818   0009C0  5001               	movf	atraso_ms@valor^0,w,c
   819   0009C2  5C03               	subwf	atraso_ms@i^0,w,c
   820   0009C4  5002               	movf	(atraso_ms@valor+1)^0,w,c
   821   0009C6  5804               	subwfb	(atraso_ms@i+1)^0,w,c
   822   0009C8  A0D8               	btfss	status,0,c
   823   0009CA  EFE9  F004         	goto	u91
   824   0009CE  EFEB  F004         	goto	u90
   825   0009D2                     u91:
   826   0009D2  EFCE  F004         	goto	l870
   827   0009D6                     u90:
   828   0009D6  0012               	return		;funcret
   829   0009D8                     __end_of_atraso_ms:
   830                           	callstack 0
   831                           
   832                           	psect	rparam
   833   000000                     
   834                           	psect	idloc
   835                           
   836                           ;Config register IDLOC0 @ 0x200000
   837                           ;	unspecified, using default values
   838   200000                     	org	2097152
   839   200000  FF                 	db	255
   840                           
   841                           ;Config register IDLOC1 @ 0x200001
   842                           ;	unspecified, using default values
   843   200001                     	org	2097153
   844   200001  FF                 	db	255
   845                           
   846                           ;Config register IDLOC2 @ 0x200002
   847                           ;	unspecified, using default values
   848   200002                     	org	2097154
   849   200002  FF                 	db	255
   850                           
   851                           ;Config register IDLOC3 @ 0x200003
   852                           ;	unspecified, using default values
   853   200003                     	org	2097155
   854   200003  FF                 	db	255
   855                           
   856                           ;Config register IDLOC4 @ 0x200004
   857                           ;	unspecified, using default values
   858   200004                     	org	2097156
   859   200004  FF                 	db	255
   860                           
   861                           ;Config register IDLOC5 @ 0x200005
   862                           ;	unspecified, using default values
   863   200005                     	org	2097157
   864   200005  FF                 	db	255
   865                           
   866                           ;Config register IDLOC6 @ 0x200006
   867                           ;	unspecified, using default values
   868   200006                     	org	2097158
   869   200006  FF                 	db	255
   870                           
   871                           ;Config register IDLOC7 @ 0x200007
   872                           ;	unspecified, using default values
   873   200007                     	org	2097159
   874   200007  FF                 	db	255
   875                           
   876                           	psect	config
   877                           
   878                           ;Config register CONFIG1L @ 0x300000
   879                           ;	PLL Prescaler Selection bits
   880                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
   881                           ;	System Clock Postscaler Selection bits
   882                           ;	CPUDIV = OSC2_PLL3, [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
   883                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   884                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
   885   300000                     	org	3145728
   886   300000  29                 	db	41
   887                           
   888                           ;Config register CONFIG1H @ 0x300001
   889                           ;	Oscillator Selection bits
   890                           ;	FOSC = HS, HS oscillator (HS)
   891                           ;	Fail-Safe Clock Monitor Enable bit
   892                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   893                           ;	Internal/External Oscillator Switchover bit
   894                           ;	IESO = OFF, Oscillator Switchover mode disabled
   895   300001                     	org	3145729
   896   300001  0C                 	db	12
   897                           
   898                           ;Config register CONFIG2L @ 0x300002
   899                           ;	Power-up Timer Enable bit
   900                           ;	PWRT = ON, PWRT enabled
   901                           ;	Brown-out Reset Enable bits
   902                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   903                           ;	Brown-out Reset Voltage bits
   904                           ;	BORV = 3, Minimum setting 2.05V
   905                           ;	USB Voltage Regulator Enable bit
   906                           ;	VREGEN = OFF, USB voltage regulator disabled
   907   300002                     	org	3145730
   908   300002  18                 	db	24
   909                           
   910                           ;Config register CONFIG2H @ 0x300003
   911                           ;	Watchdog Timer Enable bit
   912                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   913                           ;	Watchdog Timer Postscale Select bits
   914                           ;	WDTPS = 32768, 1:32768
   915   300003                     	org	3145731
   916   300003  1E                 	db	30
   917                           
   918                           ; Padding undefined space
   919   300004                     	org	3145732
   920   300004  FF                 	db	255
   921                           
   922                           ;Config register CONFIG3H @ 0x300005
   923                           ;	CCP2 MUX bit
   924                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   925                           ;	PORTB A/D Enable bit
   926                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   927                           ;	Low-Power Timer 1 Oscillator Enable bit
   928                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   929                           ;	MCLR Pin Enable bit
   930                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   931   300005                     	org	3145733
   932   300005  81                 	db	129
   933                           
   934                           ;Config register CONFIG4L @ 0x300006
   935                           ;	Stack Full/Underflow Reset Enable bit
   936                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   937                           ;	Single-Supply ICSP Enable bit
   938                           ;	LVP = OFF, Single-Supply ICSP disabled
   939                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   940                           ;	ICPRT = OFF, ICPORT disabled
   941                           ;	Extended Instruction Set Enable bit
   942                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   943                           ;	Background Debugger Enable bit
   944                           ;	DEBUG = 0x1, unprogrammed default
   945   300006                     	org	3145734
   946   300006  80                 	db	128
   947                           
   948                           ; Padding undefined space
   949   300007                     	org	3145735
   950   300007  FF                 	db	255
   951                           
   952                           ;Config register CONFIG5L @ 0x300008
   953                           ;	Code Protection bit
   954                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   955                           ;	Code Protection bit
   956                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   957                           ;	Code Protection bit
   958                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   959                           ;	Code Protection bit
   960                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   961   300008                     	org	3145736
   962   300008  0F                 	db	15
   963                           
   964                           ;Config register CONFIG5H @ 0x300009
   965                           ;	Boot Block Code Protection bit
   966                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   967                           ;	Data EEPROM Code Protection bit
   968                           ;	CPD = OFF, Data EEPROM is not code-protected
   969   300009                     	org	3145737
   970   300009  C0                 	db	192
   971                           
   972                           ;Config register CONFIG6L @ 0x30000A
   973                           ;	Write Protection bit
   974                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   975                           ;	Write Protection bit
   976                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   977                           ;	Write Protection bit
   978                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   979                           ;	Write Protection bit
   980                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   981   30000A                     	org	3145738
   982   30000A  0F                 	db	15
   983                           
   984                           ;Config register CONFIG6H @ 0x30000B
   985                           ;	Configuration Register Write Protection bit
   986                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   987                           ;	Boot Block Write Protection bit
   988                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   989                           ;	Data EEPROM Write Protection bit
   990                           ;	WRTD = OFF, Data EEPROM is not write-protected
   991   30000B                     	org	3145739
   992   30000B  E0                 	db	224
   993                           
   994                           ;Config register CONFIG7L @ 0x30000C
   995                           ;	Table Read Protection bit
   996                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   997                           ;	Table Read Protection bit
   998                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   999                           ;	Table Read Protection bit
  1000                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1001                           ;	Table Read Protection bit
  1002                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1003   30000C                     	org	3145740
  1004   30000C  0F                 	db	15
  1005                           
  1006                           ;Config register CONFIG7H @ 0x30000D
  1007                           ;	Boot Block Table Read Protection bit
  1008                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1009   30000D                     	org	3145741
  1010   30000D  40                 	db	64
  1011                           tosu	equ	0xFFF
  1012                           tosh	equ	0xFFE
  1013                           tosl	equ	0xFFD
  1014                           stkptr	equ	0xFFC
  1015                           pclatu	equ	0xFFB
  1016                           pclath	equ	0xFFA
  1017                           pcl	equ	0xFF9
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           prodh	equ	0xFF4
  1023                           prodl	equ	0xFF3
  1024                           indf0	equ	0xFEF
  1025                           postinc0	equ	0xFEE
  1026                           postdec0	equ	0xFED
  1027                           preinc0	equ	0xFEC
  1028                           plusw0	equ	0xFEB
  1029                           fsr0h	equ	0xFEA
  1030                           fsr0l	equ	0xFE9
  1031                           wreg	equ	0xFE8
  1032                           indf1	equ	0xFE7
  1033                           postinc1	equ	0xFE6
  1034                           postdec1	equ	0xFE5
  1035                           preinc1	equ	0xFE4
  1036                           plusw1	equ	0xFE3
  1037                           fsr1h	equ	0xFE2
  1038                           fsr1l	equ	0xFE1
  1039                           bsr	equ	0xFE0
  1040                           indf2	equ	0xFDF
  1041                           postinc2	equ	0xFDE
  1042                           postdec2	equ	0xFDD
  1043                           preinc2	equ	0xFDC
  1044                           plusw2	equ	0xFDB
  1045                           fsr2h	equ	0xFDA
  1046                           fsr2l	equ	0xFD9
  1047                           status	equ	0xFD8

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      11
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _main->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3001
                            _lcd_cmd
                           _lcd_init
                            _lcd_str
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              5     3      2    1055
                                              6 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1285
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            5     3      2     624
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
   _lcd_str
     _lcd_dat
       _atraso_ms
       _lcd_wr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      B       B       1       11.6%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBIGSFRhh         33      0       0      21        0.0%
BITBIGSFRhlh         E      0       0      22        0.0%
BITBIGSFRhll        23      0       0      23        0.0%
BITBIGSFRlhh         E      0       0      24        0.0%
BITBIGSFRlhl         1      0       0      25        0.0%
BITBIGSFRll         21      0       0      26        0.0%
BIGRAM             7FF      0       0      27        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 30 10:18:22 2022

                      l5 09A0                        l8 09D6                       l62 0A2A  
                     l65 0A00                       l74 098E                       l59 0A40  
                     l68 093E                       u80 09BC                       u81 09B8  
                     u90 09D6                       u91 09D2                      l900 09DC  
                    l910 09FE                      l902 09E2                      l912 08E4  
                    l904 09E4                      l920 0948                      l914 08E8  
                    l906 09F0                      l922 0964                      l930 081C  
                    l916 08F4                      l908 09F2                      l924 0966  
                    l940 0832                      l932 081E                      l870 099C  
                    l766 0A3C                      l918 0940                      l950 085C  
                    l942 0836                      l934 0820                      l926 080E  
                    l880 09BC                      l960 0884                      l952 0860  
                    l944 083C                      l936 0822                      l928 0810  
                    l882 09C0                      l890 0A0E                      l970 08AC  
                    l962 0888                      l946 084A                      l954 0864  
                    l938 0830                      l876 09AA                      l868 0990  
                    l892 0A1A                      l884 0A04                      l980 08D4  
                    l972 08B0                      l956 0872                      l964 088C  
                    l948 0850                      l878 09AC                      l894 0A1C  
                    l886 0A06                      l982 08D8                      l966 089A  
                    l974 08B4                      l958 0878                      l896 0A28  
                    l888 0A0C                      l976 08C2                      l968 08A0  
                    l898 09DA                      l978 08C8                      u100 098E  
                    u101 098A                      u110 084A                      u111 0846  
                    u120 0872                      u121 086E                      u130 089A  
                    u131 0896                      u140 08C2                      u141 08BE  
                    _PR2 000FCB                     STR_1 0802                     STR_2 0805  
                   STR_3 0801                     STR_4 0809                     _TMR2 000FCC  
                   _main 080E                     start 0000             ___param_bank 000000  
                  ?_main 0001                    _T2CON 000FCA                    _PORTD 000F83  
                  _TRISB 000F93                    _TRISD 000F95                    _TRISE 000F96  
        __end_of_lcd_dat 0A02          __end_of_lcd_cmd 0A2C          __end_of_lcd_str 0990  
                  tablat 000FF5                    status 000FD8          __initialization 0A2C  
           __end_of_main 08E4                   ??_main 000C            __activetblptr 000001  
                 _CCPR2L 000FBB                   _TMR2ON 007E52         __end_of_lcd_init 0940  
                 _lcd_wr 0A3A                   isa$std 000001                ??_lcd_dat 0006  
              ??_lcd_cmd 0006                ??_lcd_str 0009             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 0A2C            ___rparam_used 000001  
         __pcstackCOMRAM 0001                  ?_lcd_wr 0001                  _CCP2CON 000FBA  
              ?_lcd_init 0001                  __Hparam 0000                  __Lparam 0000  
      __end_of_atraso_ms 09D8             __psmallconst 0800                  __pcinit 0A2C  
                __ramtop 0800                  __ptext0 080E                  __ptext1 0940  
                __ptext2 09D8                  __ptext3 08E4                  __ptext4 0A02  
                __ptext5 0A3A                  __ptext6 0990                  _lcd_dat 09D8  
                _lcd_cmd 0A02                  _lcd_str 0940               ??_lcd_init 0007  
   end_of_initialization 0A2C                _PORTBbits 000F81                _PORTEbits 000F84  
              _TRISBbits 000F93                _TRISCbits 000F94               lcd_dat@val 0006  
             lcd_cmd@val 0006               lcd_str@str 0007               atraso_ms@i 0003  
             atraso_ms@j 0005           __end_of_lcd_wr 0A42      start_initialization 0A2C  
               ??_lcd_wr 0001                 ?_lcd_dat 0001                 ?_lcd_cmd 0001  
               ?_lcd_str 0007                _atraso_ms 0990              __smallconst 0800  
         atraso_ms@valor 0001               ?_atraso_ms 0001                lcd_wr@val 0001  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0800  
               _lcd_init 08E4                 isa$xinst 000000                 lcd_str@i 000B  
            ??_atraso_ms 0003  
